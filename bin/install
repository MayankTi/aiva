#!/bin/bash

# Fail on the first error; killable by SIGINT
set -e
trap "exit" INT

echo "
================================================

Running the AIVA dependencies setup by kengz @ April 1 2016
for bug reports, contact [ kengzwl@gmail.com ]
This will take just a few minutes.

================================================
"

# copy keys file if not already exist
AIVA_DIR=`pwd`
BIN_DIR="$AIVA_DIR/bin"

env_count=$(find $AIVA_DIR -name ".env*" -maxdepth 1 -type f | wc -l)
example_env_count=$(find $AIVA_DIR -name ".env-example" -maxdepth 1 -type f | wc -l)
if [[ $env_count -eq 1 && $example_env_count -eq 1 ]]; then (
  cp $AIVA_DIR/.env-example $AIVA_DIR/.env
  echo "Created .env"
  );
  else (
  echo "Not creating .env since it already exists"
  )
fi

keys_count=$(find $BIN_DIR -name ".keys-*" -maxdepth 1 -type f | wc -l)
example_keys_count=$(find $BIN_DIR -name ".keys-example" -maxdepth 1 -type f | wc -l)
if [[ $keys_count -eq 1 && $example_keys_count -eq 1 ]]; then (
  cp $BIN_DIR/.keys-example $BIN_DIR/.keys-aiva
  cp $BIN_DIR/.keys-example $BIN_DIR/.keys-aivadev
  echo "Created bin/.keys-aiva, bin/.keys-aivadev"
  );
  else (
  echo "Not creating bin/.keys-aiva, bin/.keys-aivadev since keys already exist"
  )
fi

# echo "
# => Requesting permission upfront"
# Ask for the administrator password upfront
# [ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"
# sudo -v
# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# install npm global packages: forever, istanbul, ngrok
echo "
=> Ensuring you have forever, ngrok"
npm list -g forever || sudo npm i -g forever
npm list -g ngrok || sudo npm i -g ngrok
npm list -g istanbul || sudo npm i -g istanbul
# npm list -g --depth=0

# determine if is Mac OSX, or Linux; then run accordingly
if [ $(uname) == "Darwin" ];
# Mac runs below
then (

echo "

Detected Mac OSX (Darwin), running corresponding setup.
================================================
";

# prevent sleep for this script; & runs in background
caffeinate -d &

# installing brew for macOS or Linux, then the other installation by brew shd work the same for both
echo "
=> Ensuring you have brew"
brew --version || ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"


# install cask
echo "
=> Ensuring you have cask"
brew cask --version || (brew tap caskroom/cask && brew install caskroom/cask/brew-cask)


# install java
echo "
=> Ensuring you have JDK 1.8 to run neo4j"
jinfo=$(brew cask info java)
jv="$(echo $jinfo | sed 's/java: \([0-9].[0-9]*\).*/\1/')"
if [ "$jv" != "1.8" ]; then brew cask install java; fi

# write JAVA_HOME path if not exists
echo $JAVA_HOME || echo "
# For neo4j to use JVM
export JAVA_HOME=\$(/usr/libexec/java_home)
" >> ~/.bash_profile


# install neo4j for brain
echo "
=> Ensuring you have neo4j"
ninfo=$(brew info neo4j)
nv="$(echo $ninfo | sed 's/\(.*\)\, dev.*/\1/')"
if [ "$nv" ]; then echo $nv; else (
brew install neo4j;
source ~/.bash_profile
echo "
# Neo4j home path
export NEO4J_HOME=$(neo4j-shell -c 'dbinfo -g Configuration dbms.directories.data' | grep -oE '\/.*lib.*?\/')" >> ~/.bash_profile
source ~/.bash_profile

# need to check this for existence too
# Install the shell tool for import export
curl -LOk http://dist.neo4j.org/jexp/shell/neo4j-shell-tools_2.2.zip && unzip neo4j-shell-tools_2.2.zip -d ${NEO4J_HOME}lib && rm neo4j-shell-tools_2.2.zip;
  ); fi

# change the default neo4j password
neo4j start
curl -X POST -d "password=0000" -u neo4j:neo4j http://localhost:7474/user/neo4j/password


# install python3
echo "
=> Ensuring you have python3"
brew install python3
sudo pip3 install -U setuptools
sudo pip3 install -U virtualenvwrapper
# spacy the better NLP, MIT-licensed
sudo pip3 install -U spacy
sudo python3 -m spacy.en.download
# tensorflow and skflow
sudo pip3 install -U numpy
sudo pip3 install -U scipy
sudo pip3 install -U scikit-learn
sudo pip3 install -U pandas
sudo pip3 install -U matplotlib
sudo pip3 install -U https://storage.googleapis.com/tensorflow/mac/tensorflow-0.8.0-py3-none-any.whl



# Install Ruby on Rails with rbenv
echo "
=> Ensuring you have Ruby on Rails"
ruby --version || (
echo "gem: --no-document" >> ~/.gemrc
brew install rbenv ruby-build
echo '
# for rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile
source ~/.bash_profile
rbenv install --verbose $(rbenv install -l | grep -v - | tail -1)
rbenv global --verbose $(rbenv install -l | grep -v - | tail -1)
gem install bundler
gem install rails
rbenv rehash
  )



);
# Linux runs below
else (
echo "

Detected Linux, running corresponding setup.
================================================
";

echo "
=> Requesting permission upfront"
# Ask for the administrator password upfront
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# install java
echo "
=> Ensuring you have JDK 1.7 to run neo4j"
java -version || sudo apt-get -y install default-jdk

# write JAVA_HOME path if not exists
if [ "$JAVA_HOME" == "" ]; 
	then jdkpath=$(readlink -f $(which java) | sed 's/\(.*\)\/bin\/java/\1/'); echo "
# For neo4j to use JVM
export JAVA_HOME=$jdkpath" >> ~/.bashrc;
fi


# install neo4j for brain
echo "
=> Ensuring you have neo4j"
# write neo4j path if not exists
if [ "$(neo4j status)" == "" ]; 
  then (
sudo apt-get -y install neo4j;
source ~/.bashrc
echo "
# Neo4j home path
export NEO4J_HOME=$(neo4j-shell -c 'dbinfo -g Configuration dbms.directories.data' | grep -oE '\/.*lib.*?\/')" >> ~/.bashrc
source ~/.bashrc

# Install the shell tool for import export
curl -LOk http://dist.neo4j.org/jexp/shell/neo4j-shell-tools_2.2.zip && unzip neo4j-shell-tools_2.2.zip -d ${NEO4J_HOME}lib && rm neo4j-shell-tools_2.2.zip;
); fi

# change the default neo4j password
neo4j start
curl -X POST -d "password=0000" -u neo4j:neo4j http://localhost:7474/user/neo4j/password


# install python3
echo "
=> Ensuring you have python3"
sudo apt-get -y install python3-pip python-dev
sudo pip3 install -U setuptools
sudo pip3 install -U virtualenvwrapper
# spacy the better NLP, MIT-licensed
sudo pip3 install -U spacy
sudo python3 -m spacy.en.download
# tensorflow and skflow
sudo apt-get -y install libatlas-dev
sudo apt-get -y install libblas-dev
sudo apt-get -y install liblapack-dev
sudo apt-get -y install gfortran
sudo apt-get -y install python3-numpy
sudo apt-get -y install python3-scipy
sudo pip3 install -U scikit-learn
sudo pip3 install -U pandas
sudo apt-get -y install python-matplotlib
sudo pip3 install -U https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.8.0-cp34-cp34m-linux_x86_64.whl


# Install Ruby on Rails with rbenv
echo "
=> Ensuring you have Ruby on Rails"
ruby --version || (
cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo '
export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc

git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
source ~/.bashrc

rbenv install --verbose $(rbenv install -l | grep -v - | tail -1)
rbenv global --verbose $(rbenv install -l | grep -v - | tail -1)
sudo apt-get -y install ruby-dev make
echo "gem: --no-ri --no-rdoc" > ~/.gemrc
gem install bundler
gem install rails
rbenv rehash
  )



);
fi
# OS split ends, continue

echo "
Dependencies setup complete.
================================================
"
